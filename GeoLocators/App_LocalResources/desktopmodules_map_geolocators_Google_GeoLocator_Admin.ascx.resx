<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 1.3
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used forserialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="chkQuerySQLInjection.Text">
    <value>Protect From SQL Injection</value>
  </data>
  <data name="chkUseCity.Text">
    <value>Include City in Address</value>
  </data>
  <data name="chkUseCountry.Text">
    <value>Include Country in Address</value>
  </data>
  <data name="chkUsePostalCode.Text">
    <value>Include Postal Code in Address</value>
  </data>
  <data name="chkUseRegion.Text">
    <value>Include Region in Address</value>
  </data>
  <data name="chkUseStreet.Text">
    <value>Include Street in Address</value>
  </data>
  <data name="chkUseUnit.Text">
    <value>Include Unit in Address</value>
  </data>
  <data name="lblAPIKey.Text">
    <value>Google API Key (Get One)</value>
  </data>
  <data name="lblCustomConnection.Text">
    <value>Connection String</value>
  </data>
  <data name="lblCustomQuery.Text">
    <value>Query</value>
  </data>
  <data name="lblInstructions.Text">
    <value>&lt;p&gt;To automate the process of assigning Global Positions to specific or general Addresses, a Geocoder is built into the module. There are a few setting for this Geocoder to work. First you must obtain or utilize an existing Google API Key. Then, from the checkboxes provided, identify the depth of the lookup against your data. For example, if you are Mapping all the users in the system, but would prefer a roll-up affect that places a marker in each common location - you would probably only choose Country and Region.&lt;/p&gt;</value>
  </data>
  <data name="lblPanelName.Text">
    <value>Geo Locator Settings</value>
  </data>
  <data name="lblQEEmpty.Text">
    <value>Empty Value</value>
  </data>
  <data name="lblQELeft.Text">
    <value>Left</value>
  </data>
  <data name="lblQERight.Text">
    <value>Right</value>
  </data>
  <data name="lblQESecurity.Text">
    <value>Security</value>
  </data>
  <data name="lblQESource.Text">
    <value>Source</value>
  </data>
  <data name="lblQETarget.Text">
    <value>Target</value>
  </data>
  <data name="lblQEType.Text">
    <value>Type</value>
  </data>
  <data name="lblQueryEditor.Text">
    <value>Query Editor</value>
  </data>
  <data name="lblQueryTarget.Text">
    <value>Target</value>
  </data>
  <data name="lblQueryVariables.Text">
    <value>Query Variables</value>
  </data>
  <data name="lblSourceInfo.Text">
    <value>Data Source Settings</value>
  </data>
  <data name="lnkAddQueryVarable.Text">
    <value>Add Query Variable</value>
  </data>
  <data name="lnkCancel.Text">
    <value>Cancel</value>
  </data>
  <data name="lnkCancelQueryOptions.Text">
    <value>Cancel</value>
  </data>
  <data name="lnkSave.Text">
    <value>Save</value>
  </data>
  <data name="lnkSaveQueryOptions.Text">
    <value>Save Variable</value>
  </data>
  <data name="rdoDataSourceCountriesOnline.Text">
    <value>Countries Online</value>
  </data>
  <data name="rdoDataSourceCustom.Text">
    <value>Custom Query</value>
  </data>
  <data name="rdoDataSourceDataPoints.Text">
    <value>Standard Data Points</value>
  </data>
  <data name="rdoDataSourceUserOnline.Text">
    <value>Users Online</value>
  </data>
</root>