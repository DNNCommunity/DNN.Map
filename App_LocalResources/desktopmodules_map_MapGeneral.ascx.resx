<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 1.3
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used forserialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="rdoUseExisting.Text">
    <value>Use Existing</value>
  </data>
  <data name="lblDescriptionSource.Text">
    <value>Description</value>
  </data>
  <data name="rdoUseExistingSource.Text">
    <value>Use Existing</value>
  </data>
  <data name="lblDescription.Text">
    <value>Description</value>
  </data>
  <data name="lblMapInfo.Text">
    <value>Map Information</value>
  </data>
  <data name="lblDynamicProvider.Text">
    <value>Visual Provider</value>
  </data>
  <data name="lblDynamicProviderGeoLocator.Text">
    <value>Geocoder</value>
  </data>
  <data name="rdoCreateNewSource.Text">
    <value>Create New</value>
  </data>
  <data name="lnkCancel.Text">
    <value>Cancel</value>
  </data>
  <data name="lblInstructions.Text">
    <value>&lt;p&gt;Unlike many other module which contain information for the specific Module in and of itself, the Dotnetnuke Map is different. Since you will be creating one or more maps with or or more sets of data which you may be utilizing through your website in different capacities, the Dotnetnuke Map module manages the Maps and Sources in a manner that lets you share them within your portal between your modules. &lt;/p&gt;
&lt;p&gt;To get started, first pick a &lt;b&gt;Map Configuration&lt;/b&gt;. This identifies the basic name and description of your Map interface, not your specific data. Let's say throughout your site you will have many maps which will have the same consistent look and feel, but with different sources of data. The Map Configuration refers to the look and feel of the map.&lt;/p&gt;
&lt;p&gt;Once a Name and description are provided, you can now select from a list of Visual Layouts, called Providers. The core set is delivered with four of these layouts. 
	&lt;OL&gt;&lt;lI&gt;Standard: Loading your points all at or near the same time.
		&lt;li&gt;Timelapse: Loading your points in a playback sequence dictated by the Sequence Number for each point
		&lt;li&gt;Positional: Loading only the points which will populate the display region when clicked.
		&lt;li&gt;Directory: An advanced layout combining Positional with a familiar Address Directory look and feel.
	&lt;/o&gt;
&lt;p&gt;Like the Map, you will also need to setup or select the basic Source Settings. These settings provide the ability to pick from the available Data Providers and Geocoders. The default module ships with the Google Geocoder and the Standard Data Provider.&lt;p&gt;
&lt;p&gt;Once complete, press "Save".&lt;/p&gt;</value>
  </data>
  <data name="lnkSave.Text">
    <value>Save</value>
  </data>
  <data name="rdoCreateNew.Text">
    <value>Create New</value>
  </data>
  <data name="lblMapInfoSource.Text">
    <value>Map Information</value>
  </data>
  <data name="lblPanelNameSource.Text">
    <value>Source Settings</value>
  </data>
  <data name="lblName.Text">
    <value>Name</value>
  </data>
  <data name="lblDynamicProviderSource.Text">
    <value>Data Provider</value>
  </data>
  <data name="lblExisting.Text">
    <value>Map Configuration</value>
  </data>
  <data name="lblNameSource.Text">
    <value>Name</value>
  </data>
  <data name="lblExistingSource.Text">
    <value>Source Configuration</value>
  </data>
  <data name="lblPanelName.Text">
    <value>Map Settings</value>
  </data>
</root>